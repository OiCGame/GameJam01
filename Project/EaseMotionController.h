#pragma once
#include "EaseMotion.h"

namespace sip
{
	// ********************************************************************************
	/// <summary>
	/// イーズモーションコントローラークラス
	/// </summary>
	// ********************************************************************************
	template <typename T > class CEaseMotionController
	{
	private:

		int                              m_SelectNo;  //! 現在のモーション番号

		CDynamicArray<CEaseMotion<T>>    m_Array;     //! モーション配列

		bool                             m_bStart;    //! 開始フラグ

		bool                             m_bEnd;      //! 終了フラグ

	public:

		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		CEaseMotionController(void) :
			m_SelectNo(0),
			m_Array(),
			m_bStart(false),
			m_bEnd(false)
		{
		}

		// ********************************************************************************
		/// <summary>
		/// デストラクタ
		/// </summary>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		~CEaseMotionController(void)
		{
		}

		// ********************************************************************************
		/// <summary>
		/// 初期化
		/// </summary>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		void Initialize(void)
		{
			Reset();
			m_bStart = false;

			// 全モーションの初期化。
			for (int i = 0; i < m_Array.GetArrayCount(); i++)
			{
				m_Array[i].Initialize();
			}
		}

		// ********************************************************************************
		/// <summary>
		/// モーションの開始
		/// </summary>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		void Start(void)
		{
			m_bStart = true;

			// 配列に何も登録されていない場合終了フラグを立てて終了。
			if (m_Array.GetArrayCount() <= 0)
			{
				m_bEnd = true;
				return;
			}

			// 先頭から始める。
			m_SelectNo = 0;

			m_Array[m_SelectNo].Start();
		}

		// ********************************************************************************
		/// <summary>
		/// モーションの一時停止
		/// </summary>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		void Stop(void)
		{
			// 配列に何も登録されていない場合終了。
			if (m_Array.GetArrayCount() <= 0)
			{
				return;
			}

			m_bStart = false;

			m_Array[m_SelectNo].Stop();
		}

		// ********************************************************************************
		/// <summary>
		/// モーションの再開
		/// </summary>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		void Resume(void)
		{
			// 配列に何も登録されていない場合終了。
			if (m_Array.GetArrayCount() <= 0)
			{
				return;
			}

			m_bStart = true;

			m_Array[m_SelectNo].Resume();
		}

		// ********************************************************************************
		/// <summary>
		/// モーションのリセット
		/// </summary>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		void Reset(void)
		{
			m_bEnd = false;

			m_SelectNo = 0;

			for (int i = 0; i < m_Array.GetArrayCount(); i++)
			{
				m_Array[i].Reset();
			}
		}

		// ********************************************************************************
		/// <summary>
		/// モーションの更新
		/// </summary>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		void Update(void)
		{
			// 始まっていないなら更新しない。
			if (!m_bStart)
			{
				return;
			}

			// 選択中のモーションが終了している場合、次に進める。
			if (m_Array[m_SelectNo].IsEnd() && !m_bEnd)
			{
				// 終了したモーション番号を記憶しておく。
				int prevMotionNo = m_SelectNo;

				// 配列の境界外を参照しないようにする。
				m_SelectNo = MOF_MIN(m_SelectNo + 1, m_Array.GetArrayCount() - 1);

				// 配列の最後だった場合は終了フラグを立てて終了。
				if (m_SelectNo == prevMotionNo)
				{
					m_bEnd = true;
				}
				else
				{
					// 次のモーションをスタートさせる。
					m_Array[m_SelectNo].Start();
				}
			}

			// 各モーションの更新。
			for (int i = 0; i < m_Array.GetArrayCount(); i++)
			{
				m_Array[i].Update();
			}
		}

		// ********************************************************************************
		/// <summary>
		/// 開始フラグの取得
		/// </summary>
		/// <returns>開始フラグ</returns>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		bool IsStart(void) const
		{
			return m_bStart;
		}

		// ********************************************************************************
		/// <summary>
		/// 終了フラグの取得
		/// </summary>
		/// <returns>終了フラグ</returns>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		bool IsEnd(void) const
		{
			return m_bEnd;
		}

		// ********************************************************************************
		/// <summary>
		/// 先頭のアニメーションが始まってからの秒を返す
		/// </summary>
		/// <returns>モーション経過時間(秒)</returns>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		float GetTimer(void) const
		{
			return m_Array[0].GetTimer();
		}

		// ********************************************************************************
		/// <summary>
		/// 配列に登録されている個数を返す
		/// </summary>
		/// <returns>モーションの数</returns>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		int GetArrayCount(void) const
		{
			return m_Array.GetArrayCount();
		}

		// ********************************************************************************
		/// <summary>
		/// 現在のアニメーションの値を返す
		/// </summary>
		/// <returns>現在のアニメーションの値</returns>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		T GetValue(void) const
		{
			return m_Array[m_SelectNo].GetValue();
		}

		// ********************************************************************************
		/// <summary>
		/// 配列にデータの追加
		/// </summary>
		/// <param name="data">追加データ</param>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		void Add(const CEaseMotion<T>& data)
		{
			m_Array.Add(data);
		}

		// ********************************************************************************
		/// <summary>
		/// 内部で Add 関数 を実行
		/// </summary>
		/// <param name="data">追加データ</param>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		void operator << (const CEaseMotion<T>& data)
		{
			Add(data);
		}

		// ********************************************************************************
		/// <summary>
		/// データを消す
		/// </summary>
		/// <created>いのうえ,2020/09/10</created>
		/// <changed>いのうえ,2020/09/10</changed>
		// ********************************************************************************
		void Clear(void)
		{
			m_Array.ReSize(0);
		}
	};
}